    public function reportDefEdits(Request $request,$id){
        echo('<br>this is reportDefEdits '.'<br>this used to be putEdit41'.
            "<br>we moved it to indexReports");$this->debug_exit(__FILE__,__LINE__,10);
        echo("<br>id ".$id); 
        //echo("<br>what_we_are_doing".$request->Input('what_we_are_doing')); 
        echo("<br>what_we_are_doing".$request->Input('report_key')); 
        //echo("<br>the request: reportDefEdits"); var_dump($request);

        //$this->debug_exit(__FILE__,__LINE__,10);
        //$this->reportDefEdits20161128($request);

        //case "maintain_modifiable_fields":
        //case "maintain_browse_fields":
        //case "ppv_define_query":
        //case "ppv_define_business_rules":
        //$this->debug_exit(__FILE__,__LINE__,0);var_dump(Input::all());
        $record                     = json_decode($request->Input('encoded_record'),1);
        $column_names_array         = json_decode($request->Input('encoded_column_names'),1);
        $working_arrays             = json_decode($request->Input('encoded_working_arrays'),1);
        //$record = json_decode($request->Input('encoded_record'));
        //var_dump($request->Input('encoded_column_names'));$this->debug_exit(__FILE__,__LINE__,10);
        $node       = $this->node_name;

        if (!empty($request->Input('what_we_are_doing'))) {

            //echo("putEdit41");$this->debug_exit(__FILE__,__LINE__,0);var_dump(Input::all());
            $what_we_are_doing = $request->Input('what_we_are_doing');               
            switch ($what_we_are_doing) {
                                                
                    
                case "updating_report_name":
                    var_dump(Input::all());$this->debug_exit(__FILE__,__LINE__,1);
                case "displaying_advanced_edits_screen":
                    //var_dump($record);$this->debug_exit(__FILE__,__LINE__,10);
                    // we do all the io in the first case 'displaying_advanced_edits_screen'
                    // and pass encoded strings to the other buttons who cycle them around as Input
                    $miscThings             = $this->execute_query_by_report_no($request->Input('report_key'));
                    //$record = json_encode($record);
                    //$record = json_decode($record,1);
                    $ppv_array_names = array('ppv_define_query','ppv_define_business_rules');
                    $working_arrays     = $this->working_arrays_construct($record,$ppv_array_names,$what_we_are_doing);
                    //$this->debug_exit(__FILE__,__LINE__,0);var_dump($working_arrays);$this->debug_exit(__FILE__,__LINE__,1);
                    //return View::make($this->model_table.'.edit_name_advanced_edits'    ,compact('miscThings'))
                    return view('miscThings.edit_name_advanced_edits'    ,compact('miscThings'))
                       ->with('record'                              ,$miscThings)
                        ->with('encoded_record'                     ,json_encode($miscThings))
                        ->with('encoded_working_arrays'             ,json_encode($working_arrays))
                        ->with('request'                            ,$request)    
                        ->with('node_name'                          ,$this->node_name)
                        ->with('model_table'                        ,$this->model_table)
                        ->with('snippet_table'                      ,$this->snippet_table)
                    ;
         return view('miscThings.reportDefEdits'    ,compact('miscThings'))
            ->with('model_table'                  ,$this->model_table)
            ->with('generated_files_folder'     , $this->generated_files_folder)
            ->with('report_key'                   , $id)
            ->with('field_names_array'            , $field_names_array)
            ->with('key_field_name'               , 'id')
            //->with('encoded_business_rules_field_name_array'    ,                             //$encoded_business_rules_field_name_array)
            ->with('data_array_name'    , $passed_to_view_array)
            ->with('record'                     , $miscThings[0])
            ->with('node_name'                  ,$this->node_name);
                     break;
                case "maintain_modifiable_fields":
                case "maintain_browse_fields":


                    switch ($request->Input('edit4_option')) {
                        case "field_list_select":
                            $column_names_array = $working_arrays[$what_we_are_doing]['lookups']['field_names'];
                            //var_dump($working_arrays[$what_we_are_doing]);$this->debug_exit(__FILE__,__LINE__,1);
                            $index2 = $working_arrays[$what_we_are_doing]['field_name_array']['field_name'];
                            $to_array = $working_arrays[$what_we_are_doing][$index2];
                            $from_array = array_diff($column_names_array,$to_array);
                            //$this->debug_exit(__FILE__,__LINE__,0);var_dump($to_array);
                            //var_dump(Input::all());$this->debug_exit(__FILE__,__LINE__,1);
                            return View::make($this->model_table.'.select_fields')
                                ->with('Input'                              ,Input::all())                  
                                //->with('edit4_return_option'              ,'field_list_save')
                                ->with('what_we_are_doing'                  ,$what_we_are_doing)
                                ->with('from_array'                         ,$from_array)
                                ->with('to_array'                           ,$to_array)
                                ->with('node_name'                          ,$this->node_name)
                                ->with('model_table'                        ,$this->model_table)
                                ->with('encoded_record'                     ,$request->Input('encoded_record'))
                                ->with('encoded_column_names'               ,$request->Input('encoded_column_names'))
                                ->with('encoded_working_arrays'             ,$request->Input('encoded_working_arrays'))
                                ->with('message',''
                                );
                            break;  
                        case "update_field_list":
                            $nv_array = array();
                            if (array_key_exists('to',Input::all())) {
                                $nv_array   = array_combine($request->Input('to'), $request->Input('to'));
                            }                                   
                            $encoded_nv_array = json_encode($nv_array);
                            $edit4_return_option = "field_list_save";
                            var_dump(Input::all());$this->debug_exit(__FILE__,__LINE__,0);

                            $updatex  = DB::connection($this->db_snippet_connection)->table($this->snippet_table)
                            ->where($this->snippet_table_key_field_name,    '=', $record[0][$this->snippet_table_key_field_name])
                            ->update(array($working_arrays[$what_we_are_doing]['field_name_array']['field_name']=>$encoded_nv_array));

                            
                            $this->generate_by_list_name($nv_array,$this->model_table);
                            //echo ("generate_by_list_name ");$this->debug_exit(__FILE__,__LINE__,0);
                            return redirect('admin/'.$this->node_name.'/edit1')
                            ->with('message', 'record updated');
                            break;                  
                    } 
                case "ppv_define_query":
                case "ppv_define_business_rules":
                    echo ("t41 ppv ");
                    //$this->debug_exit(__FILE__,__LINE__,0);var_dump(Input::all());$this->debug_exit(__FILE__,__LINE__,0);
                    $what_we_are_doing = $request->Input('what_we_are_doing');               
                    switch ($what_we_are_doing) {
                        case "ppv_define_query":
                            $blade_routine                          = "advanced_query_getEdit_blade_gen_new";
                            $blade_name                             = "_advanced_query_getEdit_blade";
                            break;
                        case "ppv_define_business_rules":
                            $blade_routine                          = "business_rules_getEdit_blade_gen";
                            $blade_name                             = "_business_rules_getEdit";
                            break;
                    }
                    switch ($request->Input('edit4_option')) {
                        case "field_list_select":
                            //$this->debug_exit(__FILE__,__LINE__,0);var_dump(Input::all());$this->debug_exit(__FILE__,__LINE__,0);
                            echo ($request->Input('edit4_option'));
                            $record_array               = json_decode($request->Input('encoded_record'),1);
                            $record_obj                 = json_decode($request->Input('encoded_record'),0);
                            $column_names_array         = json_decode($request->Input('encoded_column_names'),1);
                            $working_arrays             = json_decode($request->Input('encoded_working_arrays'),1);
                            //$this->debug_exit(__FILE__,__LINE__,0);var_dump($working_arrays);
                            //var_dump($working_arrays[$what_we_are_doing]);$this->debug_exit(__FILE__,__LINE__,1);
                            //$this->debug_exit(__FILE__,__LINE__,0);//var_dump($working_arrays[$what_we_are_doing]['field_name_array']);
                            //var_dump($working_arrays[$what_we_are_doing]);
                            //$this->debug_exit(__FILE__,__LINE__,1);
                            $field_name             = $working_arrays[$what_we_are_doing]['field_name_array']['field_name'];
                            $r_o                    = $working_arrays[$what_we_are_doing]['field_name_array']['r_o'];
                            $value                  = $working_arrays[$what_we_are_doing]['field_name_array']['value'];
                            $field_name_array       = $working_arrays[$what_we_are_doing][$field_name];
                            $r_o_array              = $working_arrays[$what_we_are_doing][$r_o];
                            $value_array            = $working_arrays[$what_we_are_doing][$value];
                            $no_of_rows = count($field_name_array);  //any of the three will do
                            
                            $filename = $this->views_files_path."/".$this->generated_files_folder."/".$request->Input('report_key').
                            $blade_name.'.blade.php';
                            $ppv_default_values = array('not_used',0,' ');

                            $three_arrays = array($field_name_array,$r_o_array,$value_array);
                            if (count($field_name_array)==0){
                                $three_arrays = $this->ppv_just_pad($three_arrays,$what_we_are_doing,$this->no_of_blank_entries,$ppv_default_values);
                                $field_name_array = $three_arrays[0];   
                                $r_o_array  = $three_arrays[1];
                                $value_array  = $three_arrays[2];
                            //echo($what_we_are_doing);var_dump($three_arrays);$this->debug_exit(__FILE__,__LINE__,1);

                            }

                        switch ($what_we_are_doing) {
                            case "ppv_define_query":
                                if (!File::exists($filename)){
                                    $blade_routine                          = "advanced_query_getEdit_blade_gen_new";
                                    $blade_name                             = "_advanced_query_getEdit_blade";
                                    $tst1 = 0;
                                    if ($tst1){
                                        $this->getEdit_ppv_write_blade_new(
                                            $request->Input('report_key'),
                                            $filename,
                                            5,
                                            $blade_routine,
                                            $blade_name);
                                    echo('one time fix reset $tst1 ');var_dump(Input::all());$this->debug_exit(__FILE__,__LINE__,1);
                                    }
                                }
                                break;
                            case "ppv_define_business_rules":
                                $blade_routine                          = "business_rules_getEdit_blade_gen";
                                $blade_name                             = "_business_rules_getEdit";
                                $tst1 = 0;
                                if ($tst1){
                                    $this->getEdit_ppv_write_blade_new(
                                        $request->Input('report_key'),
                                    $filename,
                                    4,
                                    $blade_routine,
                                    $blade_name);
                                    echo('one time fix reset $tst1 ');var_dump(Input::all());$this->debug_exit(__FILE__,__LINE__,1);
                                }
                            break;
                        }

                            // 
                            //var_dump($working_arrays);var_dump($field_name_array);var_dump($r_o_array);var_dump($value_array);$this->debug_exit(__FILE__,__LINE__,1);
                            //var_dump(Input::all());$this->debug_exit(__FILE__,__LINE__,1);

                            return View::make($this->node_name.'.ppv_update')
                                ->with('working_arrays'                     ,$working_arrays)
                                ->with('Input'                              ,Input::all())
                                ->with('record'                             ,$record_array)
                                ->with('encoded_record'                     ,$request->Input('encoded_record'))
                                ->with('encoded_working_arrays'             ,$request->Input('encoded_working_arrays'))

                                ->with('generated_files_folder'             ,$this->generated_files_folder)         
                                ->with('record2'                            ,$record_obj)
                                ->with('node_name'                          ,$this->node_name)
                                ->with('coming_from'                        ,'edit1')
                                ->with('first_lookup_array'                 ,$working_arrays[$what_we_are_doing]['lookups'][0])
                                ->with('second_lookup_array'                ,$working_arrays[$what_we_are_doing]['lookups'][1])
                                ->with('field_name_array'                   ,$field_name_array)
                                ->with('r_o_array'                          ,$r_o_array)
                                ->with('value_array'                        ,$value_array)
                                ;
        
                            break;
                        case "update_field_list":
                            //var_dump(Input::all());$this->debug_exit(__FILE__,__LINE__,1);
                            $working_arrays = json_decode($request->Input('encoded_working_arrays'),1);
                            $input_array_names = array('field_name_array','r_o_array','value_array');
                            //var_dump($working_arrays[$what_we_are_doing]['field_name_array']);$this->debug_exit(__FILE__,__LINE__,1);
                            $no_of_blank_entries = $this->no_of_blank_entries;
                            //$no_of_blank_entries = 0;
                            $ppv_default_values = array('not_used',0,' ');

                            //$arr = $this->ppv_for_loop($working_arrays[$what_we_are_doing]['field_name_array'],$working_arrays[$what_we_are_doing],$this->bypassed_field_name,'p');
                            //$arrx = $this->ppv_pop_arrays_by_value($working_arrays[$what_we_are_doing]['field_name_array'],$ppv_default_value,$pop_or_fill_ctr,$pop_or_fill);
                            //var_dump($arrx);$this->debug_exit(__FILE__,__LINE__,1);
                            //var_dump($working_arrays[$what_we_are_doing]);$this->debug_exit(__FILE__,__LINE__,1);
                            $arr0 = $this->ppv_build_update_array_new($working_arrays[$what_we_are_doing]['field_name_array'],$no_of_blank_entries,$input_array_names,$ppv_default_values);

                            //$this->debug_exit(__FILE__,__LINE__,0);var_dump($arr0);$this->debug_exit(__FILE__,__LINE__,1);

                            //$arr = $this->ppv_room_for_growth_new($working_arrays[$what_we_are_doing]['field_name_array'],$what_we_are_doing,$no_of_blank_entries,$input_array_names,$ppv_default_values);        
                            //echo ("&& ".$no_of_blank_entries." &&");
                            //var_dump(Input::all());
                            //$arr = $this->ppv_pop_arrays_by_value($array,$ppv_default_value,$pop_or_fill_ctr,$pop_or_fill);


                            //$this->debug_exit(__FILE__,__LINE__,0);var_dump($arr0);$this->debug_exit(__FILE__,__LINE__,1);
                        
                    
                            //var_dump($working_arrays);                        
                            //$this->debug_exit(__FILE__,__LINE__,0);var_dump($arr);$this->debug_exit(__FILE__,__LINE__,1);
                            // ***
                            // UPDATE the database
                            // ***
                            $updatex  = DB::connection($this->db_snippet_connection)->table($this->snippet_table)
                            ->where($this->snippet_table_key_field_name,    '=', $request->Input('report_key'))
                            ->update($arr0);
                            // ***
                            // CREATE query edit blade
                            //      $this->debug_exit(__FILE__,__LINE__,0);var_dump(Input::all());

                            //var_dump($arr0);
                            //$arr0 = json_encode($arr0);$arr0 = json_decode($arr0,1);
                            $this->my_ctr = 6;
                            $no_of_rows = $this->my_ctr;  //any of the three will do
                            $rows = $this->my_ctr;
                            $filename = $this->views_files_path."/".$this->generated_files_folder."/".$request->Input('report_key').$blade_name.'.blade.php';
                            //$rows = count($arr)+ $this->no_of_blank_entries;
                            $this->getEdit_ppv_write_blade_new(
                                $request->Input('report_key'),
                                $filename,
                                $rows,
                                $blade_routine, // e.g. advanced_query_getEdit_blade_gen_new
                                $blade_name  // e.g. advanced_query_getEdit_blade_gen_new
                                )
                                ;
                            return redirect('admin/'.$this->node_name.'/edit1')
                            ->with('message', 'record updated');
                            break;          
                            
                        
                case "ppv_define_business_rules":
                        var_dump(Input::all());$this->debug_exit(__FILE__,__LINE__,1);
                
                    break;

                default:
                        //var_dump(Input::all());$this->debug_exit(__FILE__,__LINE__,1);

                        echo("fell out the bottom: at ");var_dump(Input::all());$this->debug_exit(__FILE__,__LINE__,1);
                        break;

            
            } // end of what_we_are_doing is not blank                          


    }//else{exit("exit3026");}
        }

    //$request->input('name_of_field');
}
